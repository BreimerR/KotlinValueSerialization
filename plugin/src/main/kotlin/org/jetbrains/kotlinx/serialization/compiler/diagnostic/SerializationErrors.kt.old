/*
 * Copyright 2010-2021 JetBrains s.r.o. and Kotlin Programming Language contributors.
 * Use of this source code is governed by the Apache 2.0 license that can be found in the license/LICENSE.txt file.
 */

package org.jetbrains.kotlinx.serialization.compiler.diagnostic;


import org.jetbrains.kotlin.com.intellij.psi.PsiElement
import org.jetbrains.kotlin.diagnostics.*
import org.jetbrains.kotlin.diagnostics.Severity.ERROR
import org.jetbrains.kotlin.diagnostics.Severity.WARNING
import org.jetbrains.kotlin.psi.KtAnnotationEntry
import org.jetbrains.kotlin.types.KotlinType

object SerializationErrors {
    val INLINE_CLASSES_NOT_SUPPORTED: DiagnosticFactory2<PsiElement, String, String>
         = DiagnosticFactory2.create(ERROR);
    val PLUGIN_IS_NOT_ENABLED: DiagnosticFactory0<PsiElement>
         = DiagnosticFactory0.create(WARNING);
    val ANONYMOUS_OBJECTS_NOT_SUPPORTED: DiagnosticFactory0<PsiElement>
        = DiagnosticFactory0.create(ERROR);
    val INNER_CLASSES_NOT_SUPPORTED: DiagnosticFactory0<PsiElement>
        = DiagnosticFactory0.create(ERROR);

    val EXPLICIT_SERIALIZABLE_IS_REQUIRED: DiagnosticFactory0<PsiElement>
         = DiagnosticFactory0.create(WARNING)

    val SERIALIZABLE_ANNOTATION_IGNORED: DiagnosticFactory0<KtAnnotationEntry>
         = DiagnosticFactory0.create(ERROR)
    val NON_SERIALIZABLE_PARENT_MUST_HAVE_NOARG_CTOR: DiagnosticFactory0<KtAnnotationEntry>
        = DiagnosticFactory0.create(ERROR)
    val PRIMARY_CONSTRUCTOR_PARAMETER_IS_NOT_A_PROPERTY: DiagnosticFactory0<KtAnnotationEntry>
         = DiagnosticFactory0.create(ERROR)
    val DUPLICATE_SERIAL_NAME: DiagnosticFactory1<KtAnnotationEntry, String>
        = DiagnosticFactory1.create(ERROR);
    val SERIALIZER_NOT_FOUND: DiagnosticFactory1<PsiElement, KotlinType>
        = DiagnosticFactory1.create(ERROR);
    val SERIALIZER_NULLABILITY_INCOMPATIBLE: DiagnosticFactory2<PsiElement, KotlinType, KotlinType>
        = DiagnosticFactory2.create(ERROR);
    val SERIALIZER_TYPE_INCOMPATIBLE: DiagnosticFactory3<PsiElement, KotlinType, KotlinType, KotlinType>
         = DiagnosticFactory3.create(WARNING);
    val LOCAL_SERIALIZER_USAGE: DiagnosticFactory1<PsiElement, KotlinType>
         = DiagnosticFactory1.create(ERROR);
    val TRANSIENT_MISSING_INITIALIZER: DiagnosticFactory0<PsiElement>
         = DiagnosticFactory0.create(ERROR);

    val TRANSIENT_IS_REDUNDANT: DiagnosticFactory0<PsiElement>
        = DiagnosticFactory0.create(WARNING);
    val JSON_FORMAT_REDUNDANT_DEFAULT: DiagnosticFactory0<PsiElement>
        = DiagnosticFactory0.create(WARNING);
    val JSON_FORMAT_REDUNDANT: DiagnosticFactory0<PsiElement>
         = DiagnosticFactory0.create(WARNING);

    val INCORRECT_TRANSIENT: DiagnosticFactory0<PsiElement>
         = DiagnosticFactory0.create(WARNING);

    val REQUIRED_KOTLIN_TOO_HIGH: DiagnosticFactory3<KtAnnotationEntry, String, String, String> = DiagnosticFactory3.create(ERROR);
    val PROVIDED_RUNTIME_TOO_LOW: DiagnosticFactory3<KtAnnotationEntry, String, String, String> = DiagnosticFactory3.create(ERROR);

    val INCONSISTENT_INHERITABLE_SERIALINFO: DiagnosticFactory2<PsiElement, KotlinType, KotlinType> =
        DiagnosticFactory2.create(ERROR);

    var _initializer: Any = object : Any() {
        init {
            Errors.Initializer
                .initializeFactoryNamesAndDefaultErrorMessages(
                    SerializationErrors::class.java,
                    SerializationPluginErrorsRendering
                )
        }
    }


}
